# -*- coding: utf-8 -*-
"""hw4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIxogKqbRZ1lvMtIAXvb6EsP8v3Scxg-

# Course Summarization

## 0 General Concepts

deep learning is a subset of machine learning is a supset of artifical intelligece
artifcial intelligent is the sumulation of intellicene tought computer systems
machine learning creates ai thought computer algorythems and statistics
deep learning creates ai thought matmatical models call nural networks which in some respects simulatate the biological functions of the brain

# 1 Building the model
The arcuture of the model is dependent of the problem being solve. The problem i will be solving in this exable is a computer vission one

## 1.1 Creating the training and testing data
"""

from google.colab import drive
drive.mount('/content/drive')

#!unzip -q drive/'My Drive'/UCFCourseWork/'CAP4630ArtificialIntelligence '/hw4/skin-cancer-malignant-vs-benign.zip
!ls
!cd test && ls

train_dir = 'train'
validation_dir = 'test'

"""### Data Preprocessing"""

from keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

"""### Data generator"""

from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
batchSize = 32
numCategories = 2
classMode = "categorical"
# data augmentation

train_datagen = ImageDataGenerator(
    rescale=1./255, 
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    color_mode="rgb",
    batch_size=batchSize,
    class_mode=classMode)

validation_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    color_mode="rgb",
    batch_size=batchSize,
    class_mode=classMode)

"""## 1.2 Building the model

### Pretraing Convlution model
"""

from keras.applications import VGG16
from keras import layers
from keras import models
from keras import optimizers

conv_base = VGG16(
    weights='imagenet', 
    include_top=False, 
    input_shape=(150, 150, 3))

conv_base.trainable = False

"""### Logical Protion of the neural network"""

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
# no dropout
model.add(layers.Dense(numCategories, activation='sigmoid'))

"""# 2 Complieing the model

Compiling the model has to key variables. loss which selects which loss function to use. and the learning rate which is how much the weight changes depending on the gradient. smaller lr that more time to train but are more precise
"""

model.compile(
    loss='mean_squared_error',
    #
    # choose a smaller learning rate
    #
    optimizer=optimizers.RMSprop(lr=1e-5), 
    metrics=['acc'])

"""# 3 Training the model

When traing the net work the two variable that matter most are the epcoh and the steps per epoch. epoch is the number of timer the model is trained on the data set. higher numer means better results but may overfit. steps per epoch is the number of batches trained before the graident is computed and changing the weights of the model
"""

epoch = 10
steps = 10
history = model.fit_generator(
    train_generator,
    steps_per_epoch=steps,
    epochs=epoch,
    validation_data=validation_generator,
    validation_steps=steps)

"""# 4 Finetuning

Finetuning is the process of have a pretrain conv network frozen while the logical portion is train then the conv portion is unfrozen so that the conv portion is better tuned to the specific data it is being trained on
"""

conv_base.trainable = True

set_trainable = False
for layer in conv_base.layers:
  if layer.name == 'block5_conv1':
    set_trainable = True
  if set_trainable:
    layer.trainable = True
  else:
    layer.trainable = False

history = model.fit_generator(
    train_generator,
    steps_per_epoch=10,
    epochs=2,
    validation_data=validation_generator,
    validation_steps=10)

"""# 5 Saving and loading the network

## 5.1 Saving the model
"""

# Save the model
model.save('path_to_my_model.h5')

"""## 5.2 loading the model"""

# Recreate the exact same model purely from the file
import keras
new_model = keras.models.load_model('path_to_my_model.h5')

"""# 6 Using the network"""

import cv2
from google.colab import files
files.upload()

!ls

im = cv2.imread("12.jpg")
im = im.reshape(465,620,3)
im = im[0:150, 0:150]
im = im.reshape(1,150,150,3)

predictions = new_model.predict(im)
index = 0
predictions[index]

"""The model Deturmined the mole is benign"""